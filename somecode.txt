import {useNavigate, useOutletContext} from "react-router-dom";
import {useEffect, useState} from "react";
import Input from "./form/input";
import Select from "./form/Select";

const AddEmployee = () => {
    const {jwtToken} = useOutletContext()
    const nav = useNavigate()


    const [error, setError] = useState(null);
    const [errors, setErrors] = useState([]);
    const hasError = (key) => {
        return errors.indexOf(key) !== -1
    }

    const [user, setUser] = useState({
        id: "",
        name_surname: "",
        email: "",
        password: "",
        position_name: "",
        shifts: "",
        position_id: "",
    })

    const [positionForUser, setPositionForUser] = useState([])

    let positionOptions = []

    const [shiftsForUser, setshiftsForUser] = useState([])
    let shiftOptions = []


    useEffect(() => {
        if (jwtToken === "") {
            nav("/login")
        }

        const header = new Headers()
        header.append('Content-Type', 'application/json')
        header.append("Authorization", "Bearer " + jwtToken);

        const requestOptions = {
            method: "GET",
            headers: header,
        }

        fetch(`/positions`, requestOptions)
            .then((response) => {
                if (response.status !== 200) {
                    setError("Invalid response code: " + response.status)
                }
                return response.json();
            })
            .then((data) => {
                setPositionForUser(data)

                setUser({
                    id: "",
                    name_surname: "",
                    email: "",
                    password: "",
                    position_name: "",
                    shifts: "",
                    position_id: "",
                })

            })
            .catch(err => console.log(err));

        fetch(`/all-shifts`, requestOptions)
        .then((response) => {
            return response.json();
        })
        .then((data) => {
            setshiftsForUser(data)
        })

    }, [jwtToken, nav]);

    const handleChange = () => (event) => {
        let value = event.target.value ;
        let name = [event.target.name];
        setUser({
            ...user,
            [name]: value,
        })

    }

    const handleSubmitUser = (event) => {
        event.preventDefault();

        let errors = []

        let required = [
            {field: user.id, name: "id"},
            {field: user.name_surname, name: "name_surname"},
            {field: user.email, name: "email"},
            {field: user.password, name: "password"},
            {field: user.position_name, name: "position_name"},
            {field: shiftsForUser.name, name: "shifts"},
            {field: user.position_id, name: "position_id"},
        ]

        required.forEach(function (obj) {
            if (obj.field === "") {
                errors.push(obj.name);
            }
        })

        setErrors(errors);

        if (errors.length > 0) {
            return false;
        }

        const headers = new Headers();
        headers.append("Content-Type", "application/json");
        headers.append("Authorization", "Bearer " + jwtToken);

        let method = "PUT";


        const requestBody = user;
        let requestOptions = {
            body: JSON.stringify(requestBody),
            method: method,
            headers: headers,
            credentials: "include",
        }
        // requestBody.id = parseInt(user.id)
        // requestBody.position_id = parseInt(user.position_id)

        fetch(`/admin/add-user`, requestOptions)
            .then((response) => response.json())
            .then((data) => {
                if (data.error) {
                    console.log(data.error);
                } else {
                    nav("/all-employees");
                }
            })
            .catch(err => {
                console.log(err);
            })
    }

    positionForUser.map((pos) =>  (
        positionOptions.push({id : pos.position_name, value: pos.position_name})
    ))

    shiftsForUser.map((shift) => (
        shiftOptions.push({id : shift.name, value: shift.name})
))

    console.log(shiftOptions)

    if (error !== null) {
        return <div>Error: {error.message}</div>
    } else {
        return (
            <>
                <div>
                    <h2>Add Employee</h2>
                    <hr/>
                    <pre>{JSON.stringify(user, null, 3)}</pre>
                    <hr/>
                    <pre>{JSON.stringify(positionForUser, null, 3)}</pre>
                    <form onSubmit={handleSubmitUser}>
                        <Input
                            title={"Employee ID"}
                            className={"form-control"}
                            type="number"
                            name="id"
                            value={user.id}
                            onChange={handleChange("id")}
                            errorDiv={hasError("id") ? "text-danger" : "d-none"}
                            errorMsg={"id is required"}
                        />
                        <Input
                            title={"Name And Surname"}
                            className={"form-control"}
                            type="text"
                            name="name_surname"
                            required={"name_surname"}
                            value={user.name_surname}
                            onChange={handleChange("name_surname")}
                            errorDiv={hasError("name_surname") ? "text-danger" : "d-none"}
                            errorMsg={"First Name is required"}
                        />
                        <Input
                            title={"Email"}
                            className={"form-control"}
                            type="email"
                            name="email"
                            required={"email"}
                            value={user.email}
                            onChange={handleChange("email")}
                            errorDiv={hasError("email") ? "text-danger" : "d-none"}
                            errorMsg={"email is required"}
                        />
                        <Input
                            title={"Password"}
                            className={"form-control"}
                            type="password"
                            name="password"
                            required={"password"}
                            value={user.password}
                            onChange={handleChange("password")}
                            errorDiv={hasError("password") ? "text-danger" : "d-none"}
                            errorMsg={"password is required"}
                        />
                        <Select
                            title={"Position"}
                            name={"position_name"}
                            options={positionOptions}
                            value={positionForUser.position_name}
                            onChange={handleChange("position_name")}
                            placeHolder={"Choose..."}
                            errorMsg={"Please choose position for user"}
                            errorDiv={hasError("position_name") ? "text-danger" : "d-none"}
                        />

                        <Select
                            title={"Shift"}
                            name={"shifts"}
                            options={shiftOptions}
                            value={shiftsForUser.name}
                            onChange={handleChange("shifts")}
                            placeHolder={"Choose..."}
                            errorMsg={"Please choose shift for user"}
                            errorDiv={hasError("name") ? "text-danger" : "d-none"}
                        />

                        <Input
                            title={"Position ID"}
                            className={"form-control"}
                            type="number"
                            name="position_id"
                            required={"position_id"}
                            value={positionForUser.id}
                            placeholder={positionForUser.id}
                            onChange={handleChange("position_id")}
                            errorDiv={hasError("position_id") ? "text-danger" : "d-none"}
                            errorMsg={"position_id is required"}
                        />

                        <hr/>
                        <button className="btn btn-primary">Save</button>
                    </form>

                </div>
            </>
        )
    }
}

export default AddEmployee;

import {useNavigate, useOutletContext, useParams} from "react-router-dom";
import {useEffect, useState} from "react";
import Input from "./form/input";
import Checkbox from "./form/Checkbox";
import Swal from "sweetalert2";


const EditPosition = () => {
    let {id} = useParams();
    const {jwtToken} = useOutletContext()
    const nav = useNavigate()


    const [error, setError] = useState(null);
    const [errors, setErrors] = useState([]);
    const hasError = (key) => {
        return errors.indexOf(key) !== -1
    }



    const [position, setPosition] = useState({
        id: "",
        position_name: "",
        users: [],
        users_array: [],
        shifts: [],
    });

    if (id === undefined) {
        id = 0
    }

    useEffect(() => {
        if (jwtToken === "") {
            nav("/login")
        }

        if (id === 0) {
            setPosition({
                id: "",
                position_name: "",
                users: [],
                users_array: [],
                shifts: [],
            })
            const header = new Headers()
            header.append('Content-Type', 'application/json')

            const requestOptions = {
                method: "GET",
                headers: header,
            }

            fetch(`/all-users`, requestOptions)
                .then((res) => res.json())
                .then((data) => {
                    const checks =  []

                    data.forEach((item) => {
                        checks.push({id: item.id, checked: false, user: item.first_name + " " + item.last_name})
                    })
                    setPosition(p =>({
                        ...p,
                        users: checks,
                        users_array: [],
                    }))
                })
                .catch(err => console.log(err));
        } else {
            // editing a position
        }
    }, [jwtToken, nav, id]);

    const handleSubmit = (event) => {
        event.preventDefault();
        let errors = []
        let required = [
            {field: position.position_name, name: "position_name"},
        ]

        required.forEach(function (obj) {
            if (obj.field === "") {
                errors.push(obj.name)
            }
        })

        if (position.users_array === 0) {
            Swal.fire({
                title: "Error!",
                text: 'You must choose employee',
                icon: "error",
                confirmButtonText: "OK",
            })
            errors.push("users")
        }

        setErrors(errors)

        if (errors.length > 0) {
            return false
        }
    }
    const handleChange = () => (event) => {
        let value = event.target.value ;
        let name = [event.target.name];
        setPosition({
            ...position,
            [name]: value,
        })

    }

    const handleCheck = (event, pos) => {
        console.log("handleCheck called");
        console.log("value in handleCheck: ", event.target.value)
        console.log("checked is: ", event.target.checked)
        console.log("position is: ", position)

        let tempArr = []
        tempArr = position.users
        console.log(tempArr)
        tempArr[pos].checked = !tempArr[pos].checked

        let tmpIDs = position.users_array

        if (!event.target.checked) {
            tmpIDs.splice(tmpIDs.indexOf(event.target.value))
        } else {
            tmpIDs.push(parseInt(event.target.value, 10))
        }

        setPosition({
            ...position,
            users_array: tmpIDs
        })
    }

    return (
        <div>
            <h2>Add/Edit Position</h2>
            <hr/>
            <pre>{JSON.stringify(position, null, 3)}</pre>
            <form onSubmit={handleSubmit}>
                <input type="hidden" name="id" id="id" value={position.id}/>
                <Input
                    title={"Position Name"}
                    className={"form-control"}
                    type="text"
                    name="position_name"
                    value={position.position_name}
                    onChange={handleChange("position_name")}
                    errorDiv = {hasError("position_name") ? "text-danger" : "d-none"}
                    errorMsg={"Position Name is required"}
                />

                <h3>Users</h3>

                {position.users && position.users.length > 1 &&

                    <>
                        {Array.from(position.users).map((u, index) =>
                            <Checkbox
                                title={u.user}
                                name={"users"}
                                key={index}
                                id={"users-" + index}
                            onChange={(event) => handleCheck(event, index)}
                            value={u.id}
                            checked={position.users[index].checked}
                        />

                    )}
                    </>
                }

                <hr/>
                <button className="btn btn-primary">Save</button>

            </form>
        </div>
    )
}

export default EditPosition;